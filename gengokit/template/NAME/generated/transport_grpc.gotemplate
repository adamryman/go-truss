package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"net/http"

	"golang.org/x/net/context"
	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "{{.PBImportPath -}}"
)


// MakeGRPCServer makes a set of endpoints available as a gRPC {{GoName .Service.Name}}Server.
func MakeGRPCServer(ctx context.Context, endpoints Endpoints) pb.{{GoName .Service.Name}}Server {
	serverOptions := []grpctransport.ServerOption{
		 grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
	// {{ ToLower .Service.Name }}
	{{range $i := .Service.Methods}}
		{{ToLower $i.Name}}: grpctransport.NewServer(
			ctx,
			endpoints.{{$i.Name}}Endpoint,
			DecodeGRPC{{$i.Name}}Request,
			EncodeGRPC{{$i.Name}}Response,
			serverOptions...,
		),
	{{- end}}
	}
}

// grpcServer implements the {{GoName .Service.Name}}Server interface
type grpcServer struct {
{{range $i := .Service.Methods}}
	{{ToLower $i.Name}}   grpctransport.Handler
{{- end}}
}

// Methods for grpcServer to implement {{GoName .Service.Name}}Server interface
{{range $i := .Service.Methods}}
func (s *grpcServer) {{GoName $i.Name}}(ctx context.Context, req *pb.{{GoName $i.RequestType.Name}}) (*pb.{{GoName $i.ResponseType.Name}}, error) {
	_, rep, err := s.{{ToLower $i.Name}}.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.{{GoName $i.ResponseType.Name}}), nil
}
{{end}}

// Server Decode
{{range $i := .Service.Methods}}
// DecodeGRPC{{$i.Name}}Request is a transport/grpc.DecodeRequestFunc that converts a
// gRPC {{ToLower $i.Name}} request to a user-domain {{ToLower $i.Name}} request. Primarily useful in a server.
func DecodeGRPC{{$i.Name}}Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.{{GoName $i.RequestType.Name}})
	return req, nil
}
{{end}}


// Client Decode
{{range $i := .Service.Methods}}
// DecodeGRPC{{$i.Name}}Response is a transport/grpc.DecodeResponseFunc that converts a
// gRPC {{ToLower $i.Name}} reply to a user-domain {{ToLower $i.Name}} response. Primarily useful in a client.
func DecodeGRPC{{$i.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.{{GoName $i.ResponseType.Name}})
	return reply, nil
}
{{end}}

// Server Encode
{{range $i := .Service.Methods}}
// EncodeGRPC{{$i.Name}}Response is a transport/grpc.EncodeResponseFunc that converts a
// user-domain {{ToLower $i.Name}} response to a gRPC {{ToLower $i.Name}} reply. Primarily useful in a server.
func EncodeGRPC{{$i.Name}}Response(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.{{GoName $i.ResponseType.Name}})
	return resp, nil
}
{{end}}


// Client Encode
{{range $i := .Service.Methods}}
// EncodeGRPC{{$i.Name}}Request is a transport/grpc.EncodeRequestFunc that converts a
// user-domain {{ToLower $i.Name}} request to a gRPC {{ToLower $i.Name}} request. Primarily useful in a client.
func EncodeGRPC{{$i.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.{{GoName $i.RequestType.Name}})
	return req, nil
}
{{end}}

// Helpers

func metadataToContext(ctx context.Context, md *metadata.MD) context.Context {
	for k, v := range *md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
